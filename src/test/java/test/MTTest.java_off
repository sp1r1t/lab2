package test;

import java.util.*;
import java.util.concurrent.*;
import java.io.*;

import cli.Shell;
import cli.TestInputStream;
import cli.TestOutputStream;
import client.IClientCli;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import proxy.IProxyCli;
import server.IFileServerCli;
import util.ComponentFactory;
import util.Config;
import util.Util;
import java.util.ResourceBundle;
import java.io.IOException;
import static org.junit.Assert.assertTrue;

public class MTTest {
    static ComponentFactory componentFactory = new ComponentFactory();
    IProxyCli proxy;
    IFileServerCli server;
    IClientCli client;
    ArrayList<IClientCli> clientList = new ArrayList<IClientCli>();

    Integer clients = 0;
    Integer uploadsPerMinute = 0;
    Integer downloadsPerMinute = 0;
    Integer fileSize = 0;
    Integer overwriteRatio = 0;
    
    boolean configIsCool = false;
    boolean fail = false;

    public static void main(String[] args) {
        MTTest t = new MTTest();
        try {
            t.run();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void run() throws Exception {
        if(!readConfig()) {
            return;
        }
        try {
            before();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        boolean t = test();
        if (!t) {
            fail = true;
        }
        after();

        if (fail) {
            System.out.println("~~++== TEST FAILED ==++~~"); 
        }

    }

    @Before
    public void before() throws Exception {
        proxy = componentFactory.startProxy(new Config("proxy"), new Shell("proxy", new TestOutputStream(System.out), new TestInputStream()));
        Thread.sleep(Util.WAIT_FOR_COMPONENT_STARTUP);
		
        server = componentFactory.startFileServer(new Config("fs1"), new Shell("fs1", new TestOutputStream(System.out), new TestInputStream()));
        Thread.sleep(Util.WAIT_FOR_COMPONENT_STARTUP);
		
        for (int i = 0; i < clients; i++) {
            Shell clientShell = new Shell("client", 
                                          new TestOutputStream(System.out), 
                                          new TestInputStream());
            ClientController cliCtr = new ClientController(clientShell);
            cliCtr.call();
            Thread.sleep(Util.WAIT_FOR_COMPONENT_STARTUP);
        }
    }

    @After
    public void after() throws Exception {
        try {
            if (proxy != null) {
                proxy.exit();                
            }
        } catch (Exception e) {
            // This should not happen. In case it does, output the stack trace for easier trouble shooting.
            e.printStackTrace();
        }
        try {
            if (server != null) {
                server.exit();
            }
        } catch (IOException e) {
            // This should not happen. In case it does, output the stack trace for easier trouble shooting.
            e.printStackTrace();
        }
        try {
            /*for (IClientCli c : clientList) {
                c.exit();
                }*/
            if (client != null) {
                client.exit();                
            }
        } catch (IOException e) {
            // This should not happen. In case it does, output the stack trace for easier trouble shooting.
            e.printStackTrace();
        }
    }


    @Test
    public boolean test() throws Exception {
        System.out.println("starting multi threading test"); 
        /*System.out.println("1st client command."); 
        String actual = client.login("alice", "12345").toString();
        System.out.println("resp: " + actual); 
        String expected = "success";
        assertTrue(String.format("Response must contain '%s' but was '%s'", expected, actual), actual.contains(expected));

        System.out.println("2nd client command."); 
        actual = client.credits().toString();
        expected = "200";
        assertTrue(String.format("Response must contain '%s' but was '%s'", expected, actual), actual.contains(expected));

        System.out.println("3rd client command."); 
        actual = client.download("short.txt").toString();
        expected = "!data dslab13";
        assertTrue(String.format("Response must start with '%s' but was '%s'", expected, actual), actual.startsWith(expected));

        System.out.println("4th client command."); 
        actual = client.credits().toString();
        expected = "193";
        assertTrue(String.format("Response must contain '%s' but was '%s'", expected, actual), actual.contains(expected));
		
        System.out.println("5th client command."); 
        actual = client.upload("upload.txt").toString();
        expected = "success";
        assertTrue(String.format("Response must contain '%s' but was '%s'", expected, actual), actual.contains(expected));

        System.out.println("6th client command."); 
        actual = client.credits().toString();
        expected = "291";
        assertTrue(String.format("Response must contain '%s' but was '%s'", expected, actual), actual.contains(expected));

        System.out.println("7th client command."); 
        actual = client.logout().toString();
        expected = "Successfully logged out.";
        assertTrue(String.format("Response must contain '%s' but was '%s'", expected, actual), actual.contains(expected));*/
        Thread.sleep(2000);
        return true;
    }


    public boolean readConfig() {
        // read config
        String key = "mttest";
        try {
            PropertyResourceBundle config = getConfig();
            key = "clients";
            clients = parseInt(config.getString("clients"));
            key = "uploadsPerMinute";
            uploadsPerMinute = parseInt(config.getString(key));
            key = "downloadsPerMinute";
            downloadsPerMinute = parseInt(config.getString(key));
            key = "fileSize";
            fileSize = parseInt(config.getString(key));
            key = "overwriteRatio";
            overwriteRatio = parseInt(config.getString(key));
        }
        catch (MissingResourceException x) {
            if(key == "mttest") {
                System.out.println("Config " + key + 
                             ".properties does not exist.");
            } else {
                System.out.println("Key " + key + " is not defined.");
            }
            return false;
        }
        catch (Exception ex) {
            ex.printStackTrace(); 
        }
        System.out.println("Clients: " + clients); 
        System.out.println("Uploads: " + uploadsPerMinute); 
        System.out.println("Downloads: " + downloadsPerMinute); 
        System.out.println("File Size: " + fileSize); 
        System.out.println("Ratio: " + overwriteRatio); 

        return true;
    }

    private int parseInt(String s) {
        return Integer.parseInt(s);
    }

    private PropertyResourceBundle getConfig() throws Exception {
        String file = "src/test/resources/loadtest.properties";
        FileInputStream fis = new FileInputStream(file);
        try {
            return new PropertyResourceBundle(fis);
        } finally {
            fis.close();
        }
    }

    class ClientController implements Callable<Boolean> {
        IClientCli client;
        Shell clientShell;

        public ClientController(Shell clientShell) {
            this.clientShell = clientShell;
        }

        public Boolean call() {
            try {
                client = componentFactory.startClient(new Config("client"), clientShell);
                System.out.println(client.list().toString()); 
                client.exit();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
            return true;
        }
    }
}
